ma.simon.plot.low
ma.simon.results3
theta.vec.low <- seq(0.1, 0.4, 0.05)
ma.simon.results3 <- vector("list", length(theta.vec.low))
for(i in 1:length(theta.vec.low)){
ma.simon.results3[[i]] <- maSimon(theta=theta.vec.low[i],
des=simon.des3,
nsims=1e4,
n.studies=4)
}
ma.simon.results3 <- do.call(rbind, ma.simon.results3)
ma.simon.plot.low <- ggplot(data=ma.simon.results3, mapping=aes(x=theta, y=bias, col=type))+
geom_line(alpha=0.4, size=1)+
geom_point()+
labs(x="True response probability theta",
y="Bias (estimate - theta)",
title="Bias in meta-analysis",
subtitle="One Simon design (p0=0.1, p1=0.2), four non-ADs")+
geom_vline(aes(xintercept=0.2), col="grey", linetype="dashed")+
geom_vline(aes(xintercept=0.3), col="grey", linetype="dashed")+
geom_hline(aes(yintercept=0), col="grey", linetype="dashed")+
ylim(max(abs(ma.simon.results3$bias)) * c(-1.1, 1.1) )+
scale_x_continuous(breaks=theta.vec.low)
ma.simon.plot.low
ma.simon.results3
x
x <- maSimon(theta=0.1,
des=simon.des3,
nsims=1e4,
n.studies=4)
x
x <- pwbSimon(theta=0.1, des=simon.des3)
x
x <- pwbSimon(theta=0.1, des=simon.des3)
x
x <- pwbSimon(theta=0.1, des=simon.des3)
x
x <- pwbSimon(theta=0.1, des=simon.des3)
x
sum(x$results$responses==0)
set.seed(1)
x <- maSimon(theta=0.1,
des=simon.des3,
nsims=1e4,
n.studies=4)
x
set.seed(2)
x <- maSimon(theta=0.1,
des=simon.des3,
nsims=1e4,
n.studies=4)
x
debug(maSimon)
set.seed(2)
x <- maSimon(theta=0.1,
des=simon.des3,
nsims=1e4,
n.studies=4)
simon.data
head(responses)
undebug(maSimon)
#' maSimon
#'
#' Examines bias for a single Simon design WRT a meta-analysis of non-adaptive designs
#'
#' @param theta true response probablity
#' @param des a realisation of a Simon design, formatted as per output of clinfun::ph2simon
#' @param nsims number of simulations (default 1e5)
#' @param n.studies number of non-adaptive studies in meta-analysis
#' @return Data frame of results
#' @export
#'
maSimon <- function(theta=0.5, des, nsims=1e5, n.studies=4){
# Obtain bias for single true response probability:
simon.data <- pwbSimon(theta=theta, des=des, nsims=nsims)$results
#### Meta-analysis: Simulate further trials  ####
N <- des[names(des)=="n"] # max sample size of Simon design
responses <- vector("list", nsims)
for(i in 1:nsims){
responses[[i]] <- rbinom(n=n.studies, size=N, prob=theta)
}
responses <- do.call(rbind, responses)
theta.hat <- responses/N
se <- sqrt((theta.hat)*(1-theta.hat)/N)
# Combine results from Simon simulation and MA simulation:
theta.hat <- cbind(simon.data$theta.hat, theta.hat)
se <- cbind(simon.data$se, se)
# Summary estimate and bias for all 5 trials:
wtdmeans.all <- rep(NA, nsims)
for(i in 1:nrow(theta.hat)){
wtdmeans.all[i] <- weighted.mean(x=theta.hat[i, ], w=1/se[i, ]^2)
}
bias.all <- wtdmeans.all-theta
# Summary estimate and bias, excluding adaptive design if stopped early:
wtdmeans.exclude <- wtdmeans.all
for(i in (1:nsims)[simon.data$early.stop==TRUE]){
wtdmeans.exclude[i] <- weighted.mean(x=theta.hat[i, 2:(n.studies+1)], w=1/se[i, 2:(n.studies+1)]^2)
}
bias.exclude <- wtdmeans.exclude-theta
mean.trials <- n.studies+mean(simon.data$early.stop==FALSE)
browser()
# Present results #
ma.df <- data.frame(reps=rep(nsims, 2),
mean.studies=c(n.studies+1, mean.trials),
bias=round(c(mean(bias.all), mean(bias.exclude)), 5),
mean.se=round(c(sd(wtdmeans.all), sd(wtdmeans.exclude)), 3),
theta=rep(theta, 2),
type=c("All trials", "Exclude early stopped")
)
row.names(ma.df) <- c("All trials", "Exclude early stopped")
return(ma.df)
}
x <- maSimon(theta=0.1,
des=simon.des3,
nsims=1e4,
n.studies=4)
bias.all
round(c(mean(bias.all), mean(bias.exclude)), 5)
mean(bias.all)
theta
summary(wtdmeans.all)
which(is.nan(wtdmeans.all))
ind <- which(is.nan(wtdmeans.all))
theta.hat[ind,]
se[ind,]
1/0
1/0^2
simon.data[ind,]
#'
#' Examines bias for a single Simon design WRT a meta-analysis of non-adaptive designs
#'
#' @param theta true response probablity
#' @param des a realisation of a Simon design, formatted as per output of clinfun::ph2simon
#' @param nsims number of simulations (default 1e5)
#' @param n.studies number of non-adaptive studies in meta-analysis
#' @return Data frame of results
#' @export
#'
maSimon <- function(theta=0.5, des, nsims=1e5, n.studies=4){
# Obtain bias for single true response probability:
simon.data <- pwbSimon(theta=theta, des=des, nsims=nsims)$results
#### Meta-analysis: Simulate further trials  ####
N <- des[names(des)=="n"] # max sample size of Simon design
responses <- vector("list", nsims)
for(i in 1:nsims){
responses[[i]] <- rbinom(n=n.studies, size=N, prob=theta)
}
responses <- do.call(rbind, responses)
theta.hat <- responses/N
se <- sqrt((theta.hat)*(1-theta.hat)/N)
# Combine results from Simon simulation and MA simulation:
theta.hat <- cbind(simon.data$theta.hat.cor, theta.hat)
se <- cbind(simon.data$se.cor, se)
# Summary estimate and bias for all 5 trials:
wtdmeans.all <- rep(NA, nsims)
for(i in 1:nrow(theta.hat)){
wtdmeans.all[i] <- weighted.mean(x=theta.hat[i, ], w=1/se[i, ]^2)
}
bias.all <- wtdmeans.all-theta
# Summary estimate and bias, excluding adaptive design if stopped early:
wtdmeans.exclude <- wtdmeans.all
for(i in (1:nsims)[simon.data$early.stop==TRUE]){
wtdmeans.exclude[i] <- weighted.mean(x=theta.hat[i, 2:(n.studies+1)], w=1/se[i, 2:(n.studies+1)]^2)
}
bias.exclude <- wtdmeans.exclude-theta
mean.trials <- n.studies+mean(simon.data$early.stop==FALSE)
browser()
# Present results #
ma.df <- data.frame(reps=rep(nsims, 2),
mean.studies=c(n.studies+1, mean.trials),
bias=round(c(mean(bias.all), mean(bias.exclude)), 5),
mean.se=round(c(sd(wtdmeans.all), sd(wtdmeans.exclude)), 3),
theta=rep(theta, 2),
type=c("All trials", "Exclude early stopped")
)
row.names(ma.df) <- c("All trials", "Exclude early stopped")
return(ma.df)
}
#' maSimon
#'
#' Examines bias for a single Simon design WRT a meta-analysis of non-adaptive designs
#'
#' @param theta true response probablity
#' @param des a realisation of a Simon design, formatted as per output of clinfun::ph2simon
#' @param nsims number of simulations (default 1e5)
#' @param n.studies number of non-adaptive studies in meta-analysis
#' @return Data frame of results
#' @export
#'
maSimon <- function(theta=0.5, des, nsims=1e5, n.studies=4){
# Obtain bias for single true response probability:
simon.data <- pwbSimon(theta=theta, des=des, nsims=nsims)$results
#### Meta-analysis: Simulate further trials  ####
N <- des[names(des)=="n"] # max sample size of Simon design
responses <- vector("list", nsims)
for(i in 1:nsims){
responses[[i]] <- rbinom(n=n.studies, size=N, prob=theta)
}
responses <- do.call(rbind, responses)
theta.hat <- responses/N
se <- sqrt((theta.hat)*(1-theta.hat)/N)
# Combine results from Simon simulation and MA simulation:
theta.hat <- cbind(simon.data$theta.hat.cor, theta.hat)
se <- cbind(simon.data$se.cor, se)
# Summary estimate and bias for all 5 trials:
wtdmeans.all <- rep(NA, nsims)
for(i in 1:nrow(theta.hat)){
wtdmeans.all[i] <- weighted.mean(x=theta.hat[i, ], w=1/se[i, ]^2)
}
bias.all <- wtdmeans.all-theta
# Summary estimate and bias, excluding adaptive design if stopped early:
wtdmeans.exclude <- wtdmeans.all
for(i in (1:nsims)[simon.data$early.stop==TRUE]){
wtdmeans.exclude[i] <- weighted.mean(x=theta.hat[i, 2:(n.studies+1)], w=1/se[i, 2:(n.studies+1)]^2)
}
bias.exclude <- wtdmeans.exclude-theta
mean.trials <- n.studies+mean(simon.data$early.stop==FALSE)
# Present results #
ma.df <- data.frame(reps=rep(nsims, 2),
mean.studies=c(n.studies+1, mean.trials),
bias=round(c(mean(bias.all), mean(bias.exclude)), 5),
mean.se=round(c(sd(wtdmeans.all), sd(wtdmeans.exclude)), 3),
theta=rep(theta, 2),
type=c("All trials", "Exclude early stopped")
)
row.names(ma.df) <- c("All trials", "Exclude early stopped")
return(ma.df)
}
set.seed(2)
x <- maSimon(theta=0.1,
des=simon.des3,
nsims=1e4,
n.studies=4)
#' maSimon
#'
#' Examines bias for a single Simon design WRT a meta-analysis of non-adaptive designs
#'
#' @param theta true response probablity
#' @param des a realisation of a Simon design, formatted as per output of clinfun::ph2simon
#' @param nsims number of simulations (default 1e5)
#' @param n.studies number of non-adaptive studies in meta-analysis
#' @return Data frame of results
#' @export
#'
maSimon <- function(theta=0.5, des, nsims=1e5, n.studies=4){
# Obtain bias for single true response probability:
simon.data <- pwbSimon(theta=theta, des=des, nsims=nsims)$results
#### Meta-analysis: Simulate further trials  ####
N <- des[names(des)=="n"] # max sample size of Simon design
responses <- vector("list", nsims)
for(i in 1:nsims){
responses[[i]] <- rbinom(n=n.studies, size=N, prob=theta)
}
responses <- do.call(rbind, responses)
theta.hat <- responses/N
se <- sqrt((theta.hat)*(1-theta.hat)/N)
# Combine results from Simon simulation and MA simulation:
theta.hat <- cbind(simon.data$theta.hat.cor, theta.hat)
se <- cbind(simon.data$se.cor, se)
# Summary estimate and bias for all 5 trials:
wtdmeans.all <- rep(NA, nsims)
for(i in 1:nrow(theta.hat)){
wtdmeans.all[i] <- weighted.mean(x=theta.hat[i, ], w=1/se[i, ]^2)
}
bias.all <- wtdmeans.all-theta
# Summary estimate and bias, excluding adaptive design if stopped early:
wtdmeans.exclude <- wtdmeans.all
for(i in (1:nsims)[simon.data$early.stop==TRUE]){
wtdmeans.exclude[i] <- weighted.mean(x=theta.hat[i, 2:(n.studies+1)], w=1/se[i, 2:(n.studies+1)]^2)
}
bias.exclude <- wtdmeans.exclude-theta
mean.trials <- n.studies+mean(simon.data$early.stop==FALSE)
# Present results #
ma.df <- data.frame(reps=rep(nsims, 2),
mean.studies=c(n.studies+1, mean.trials),
bias=round(c(mean(bias.all), mean(bias.exclude)), 5),
mean.se=round(c(sd(wtdmeans.all), sd(wtdmeans.exclude)), 3),
theta=rep(theta, 2),
type=c("All trials", "Exclude early stopped")
)
row.names(ma.df) <- c("All trials", "Exclude early stopped")
return(ma.df)
}
x <- maSimon(theta=0.1,
des=simon.des3,
nsims=1e4,
n.studies=4)
x
3031.83*12
230*12*10
0.1^100
N=100
n.studies=4
theta=0.1
nsims=10
responses <- vector("list", nsims)
for(i in 1:nsims){
responses[[i]] <- rbinom(n=n.studies, size=N, prob=theta)
}
responses <- do.call(rbind, responses)
theta.hat <- responses/N
se <- sqrt((theta.hat)*(1-theta.hat)/N)
theta.hat
se
responses
paste("Study ", 1:n.studies, sep="")
simMeta <- function(N, theta, n.studies, nsims){
responses <- vector("list", nsims)
for(i in 1:nsims){
responses[[i]] <- rbinom(n=n.studies, size=N, prob=theta)
}
responses <- do.call(rbind, responses)
theta.hat <- responses/N
se <- sqrt((theta.hat)*(1-theta.hat)/N)
colnames(theta.hat) <- paste("Study ", 1:n.studies, sep="")
colnames(se) <- paste("Study ", 1:n.studies, sep="")
MA.output <- list(theta.hat=theta.hat,
se=se)
MA.output
}
knitr::opts_chunk$set(echo = TRUE)
x <- simMeta(N=100, theta=0.3, n.studies=5, nsims=1000)
x
# Simulate the trials:
theta.MA <- seq(0.1, 0.9, 0.1)
bias <- vector("list", length(theta.MA))
for(i in 1:length(theta.MA)){
MA.results <- simMeta(N=100, theta=theta.MA[i], n.studies=5, nsims=1000)
for(j in 1:nsims){
wtdmeans <- weighted.mean(x=MA.results$theta.hat[j, ], w=1/MA.results$se[j, ]^2)
}
bias[[i]] <- wtdmeans-theta.MA[i]
}
# Meta-analyse them:
wtdmeans.all <- rep(NA, nsims)
for(i in 1:nsims){
wtdmeans.all[i] <- weighted.mean(x=MA.results$theta.hat[i, ], w=1/MA.results$se[i, ]^2)
}
bias.all <- wtdmeans.all-theta
# Summary estimate and bias for all 5 trials:
for(i in 1:nrow(theta.hat)){
wtdmeans.all[i] <- weighted.mean(x=theta.hat[i, ], w=1/se[i, ]^2)
}
# Summary estimate and bias, excluding adaptive design if stopped early:
wtdmeans.exclude <- wtdmeans.all
for(i in (1:nsims)[simon.data$early.stop==TRUE]){
wtdmeans.exclude[i] <- weighted.mean(x=theta.hat[i, 2:(n.studies+1)], w=1/se[i, 2:(n.studies+1)]^2)
}
# Simulate the trials:
theta.MA <- seq(0.1, 0.9, 0.1)
bias <- vector("list", length(theta.MA))
for(i in 1:length(theta.MA)){
MA.results <- simMeta(N=100, theta=theta.MA[i], n.studies=5, nsims=1000)
for(j in 1:nsims){
wtdmeans <- weighted.mean(x=MA.results$theta.hat[j, ], w=1/MA.results$se[j, ]^2)
}
bias[[i]] <- wtdmeans-theta.MA[i]
}
head(bias)
wtdmeans
540-80
55760-460
# Simulate the trials:
theta.MA <- seq(0.1, 0.9, 0.1)
bias <- vector("list", length(theta.MA))
for(i in 1:length(theta.MA)){
MA.results <- simMeta(N=100, theta=theta.MA[i], n.studies=5, nsims=1000)
wtdmeans <- rep(NA, nsims)
for(j in 1:nsims){
wtdmeans[j] <- weighted.mean(x=MA.results$theta.hat[j, ], w=1/MA.results$se[j, ]^2)
}
bias[[i]] <- wtdmeans-theta.MA[i]
}
head(bias)
bias
str(bias)
nsims
# Simulate the trials:
nsims <- 10
theta.MA <- seq(0.1, 0.9, 0.1)
bias <- vector("list", length(theta.MA))
for(i in 1:length(theta.MA)){
MA.results <- simMeta(N=100, theta=theta.MA[i], n.studies=5, nsims=nsims)
wtdmeans <- rep(NA, nsims)
for(j in 1:nsims){
wtdmeans[j] <- weighted.mean(x=MA.results$theta.hat[j, ], w=1/MA.results$se[j, ]^2)
}
bias[[i]] <- wtdmeans-theta.MA[i]
}
head(bias)
# Simulate the trials:
nsims <- 10
theta.MA <- seq(0.1, 0.9, 0.1)
bias <- rep(NA, length(theta.MA))
for(i in 1:length(theta.MA)){
MA.results <- simMeta(N=100, theta=theta.MA[i], n.studies=5, nsims=nsims)
wtdmeans <- rep(NA, nsims)
for(j in 1:nsims){
wtdmeans[j] <- weighted.mean(x=MA.results$theta.hat[j, ], w=1/MA.results$se[j, ]^2)
}
bias[i] <- mean(wtdmeans-theta.MA[i])
}
bias
# Simulate the trials:
nsims <- 10
theta.MA <- seq(0.1, 0.9, 0.1)
bias <- rep(NA, length(theta.MA))
for(i in 1:length(theta.MA)){
MA.results <- simMeta(N=100, theta=theta.MA[i], n.studies=5, nsims=nsims)
wtdmeans <- rep(NA, nsims)
for(j in 1:nsims){
wtdmeans[j] <- weighted.mean(x=MA.results$theta.hat[j, ], w=1/MA.results$se[j, ]^2)
}
bias[i] <- mean(wtdmeans-theta.MA[i])
}
bias.df <- data.frame(bias=bias,
theta=theta.MA)
bias.df
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
ggplot(data=bias.df, mapping=aes(x=theta, y=bias))+
geom_line()
ggplot(data=bias.df, mapping=aes(x=theta, y=bias))+
geom_line()+
geom_point()+
labs(x="True response probability theta",
y="Bias (estimate - theta)",
title="Bias in meta-analysis",
subtitle="No adaptive designs")+
geom_hline(aes(yintercept=0), col="grey", linetype="dashed")+
ylim(max(abs(bias.df$bias)) * c(-1, 1) )+
scale_x_continuous(breaks=theta.MA)
# Simulate the trials:
nsims <- 10000
theta.MA <- seq(0.1, 0.9, 0.1)
bias <- rep(NA, length(theta.MA))
for(i in 1:length(theta.MA)){
MA.results <- simMeta(N=100, theta=theta.MA[i], n.studies=5, nsims=nsims)
wtdmeans <- rep(NA, nsims)
for(j in 1:nsims){
wtdmeans[j] <- weighted.mean(x=MA.results$theta.hat[j, ], w=1/MA.results$se[j, ]^2)
}
bias[i] <- mean(wtdmeans-theta.MA[i])
}
bias.df <- data.frame(bias=bias,
theta=theta.MA)
ggplot(data=bias.df, mapping=aes(x=theta, y=bias))+
geom_line()+
geom_point()+
labs(x="True response probability theta",
y="Bias (estimate - theta)",
title="Bias in meta-analysis",
subtitle="No adaptive designs")+
geom_hline(aes(yintercept=0), col="grey", linetype="dashed")+
ylim(max(abs(bias.df$bias)) * c(-1, 1) )+
scale_x_continuous(breaks=theta.MA)
bias.df
MA.results
simMeta <- function(N, theta, n.studies, nsims){
responses <- vector("list", nsims)
for(i in 1:nsims){
responses[[i]] <- rbinom(n=n.studies, size=N, prob=theta)
}
responses <- do.call(rbind, responses)
# Correction in case there are 0 responses or N responses:
responses[responses==0] <- 0.5
responses[responses==N] <- N-0.5
theta.hat <- responses/N
se <- sqrt((theta.hat)*(1-theta.hat)/N)
colnames(theta.hat) <- paste("Study ", 1:n.studies, sep="")
colnames(se) <- paste("Study ", 1:n.studies, sep="")
MA.output <- list(theta.hat=theta.hat,
se=se)
MA.output
}
# Simulate the trials:
nsims <- 10000
theta.MA <- seq(0.1, 0.9, 0.1)
bias <- rep(NA, length(theta.MA))
for(i in 1:length(theta.MA)){
MA.results <- simMeta(N=100, theta=theta.MA[i], n.studies=5, nsims=nsims)
wtdmeans <- rep(NA, nsims)
for(j in 1:nsims){
wtdmeans[j] <- weighted.mean(x=MA.results$theta.hat[j, ], w=1/MA.results$se[j, ]^2)
}
bias[i] <- mean(wtdmeans-theta.MA[i])
}
bias.df <- data.frame(bias=bias,
theta=theta.MA)
ggplot(data=bias.df, mapping=aes(x=theta, y=bias))+
geom_line()+
geom_point()+
labs(x="True response probability theta",
y="Bias (estimate - theta)",
title="Bias in meta-analysis",
subtitle="No adaptive designs")+
geom_hline(aes(yintercept=0), col="grey", linetype="dashed")+
ylim(max(abs(bias.df$bias)) * c(-1, 1) )+
scale_x_continuous(breaks=theta.MA)
ma.simon.results2
theta.vec <- seq(0.5, 0.9, 0.05)
ma.simon.results2 <- vector("list", length(theta.vec))
for(i in 1:length(theta.vec)){
ma.simon.results2[[i]] <- maSimon(theta=theta.vec[i],
des=simon.des2,
nsims=1e4,
n.studies=4)
}
?sd
devtools::document()
rm(list = c("i", "j", "maSimon", "N", "nsims", "pwbSimon", "responses", "se", "simMeta", "theta", "theta.hat", "theta.vec"))
devtools::document()
