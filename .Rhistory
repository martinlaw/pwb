cp.l.=cp.l,
always.drop.=always.drop)
# Use the bisection method to find the n that gives the appropriate power (using drop the loser design):
n.all <- 1:n.max
a <- 1
b <- length(n.all)
d <- which(n.all==n.init)
while(b-a>1){
pwr.output <- findR(bounds=r.k,
typeI.power="power",
ts=ts.global.null,
n.stage=n.all[d],
nsims.=nsims,
K.=K,
vars.=vars,
delta0.=delta0,
delta1.=delta1,
alpha.k.=alpha.k,
cp.l.=cp.l,
always.drop.=always.drop)
print(paste("Power is ", format(pwr.output$pwr, digits=4), " when n per stage is ", n.all[d]), q=F)
if(pwr.output$pwr < power){
a <- d
d <- ceiling(a+(b-a)/2)
} else {
b <- d
d <- ceiling(a+(b-a)/2)
}
} # end of while
final.n.stage <- n.all[d]
print(paste("Final n per stage: ", final.n.stage), q=F)
final.pwr <- findR(bounds=r.k,
typeI.power="power",
ts=ts.global.null,
n.stage=final.n.stage,
nsims.=nsims,
K.=K,
vars.=vars,
delta0.=delta0,
delta1.=delta1,
alpha.k.=alpha.k,
cp.l.=cp.l,
always.drop.=always.drop)
# Now find optimal stopping boundaries and corresponding type I errors for trial with no dropped outcomes, using same n per stage as above trial:
r.k.nodrop <- bobyqa(par=c(2),
fn = findR,
lower=0.01,
upper=10,
typeI.power="typeI",
ts=ts.global.null,
n.stage=final.n.stage,
return.optimisation=TRUE,
drop.outcomes=FALSE,
nsims.=nsims,
K.=K,
vars.=vars,
delta0.=delta0,
delta1.=delta1,
alpha.k.=alpha.k,
cp.l.=cp.l)$par
typeIerr.k.nodrop <- findR(bounds=r.k.nodrop,
typeI.power="typeI",
ts=ts.global.null,
n.stage=final.n.stage,
drop.outcomes = FALSE,
nsims.=nsims,
K.=K,
vars.=vars,
delta0.=delta0,
delta1.=delta1,
alpha.k.=alpha.k,
cp.l.=cp.l)
pwr.nodrop.output <- findR(bounds=r.k.nodrop,
typeI.power="power",
ts=ts.global.null,
n.stage=final.n.stage,
drop.outcomes = FALSE,
nsims.=nsims,
K.=K,
vars.=vars,
delta0.=delta0,
delta1.=delta1,
alpha.k.=alpha.k,
cp.l.=cp.l)
#####  single-stage design, no DtL ####
# Type I error:
p.reject.single.stage <- function(bounds,
ts,
alpha,
opt){
ts.single.stage <- ts[,3:4]
rejections <- rowSums(ts.single.stage > bounds) > 0
t1.err.single.stage <- sum(rejections)/nrow(ts)
#t1.err.single.stage <-  sum(ts.single.stage[,1] > bounds)/nrow(ts) # single outcome only.
# When first outcome only, boundary is ~1.645. Power unchanged.
if(opt==TRUE){
alpha.diff <- (t1.err.single.stage-alpha)^2
return(alpha.diff)
}else{
return(t1.err.single.stage)
}
}
r.k.single.stage <- bobyqa(par=2,
fn=p.reject.single.stage,
lower=0.01,
upper=10,
ts=ts.global.null,
alpha=alpha.k,
opt=TRUE)$par
t1.err.single.stage <- p.reject.single.stage(bounds=r.k.single.stage,
ts=ts.global.null,
alpha=alpha.k,
opt=FALSE)
# Power:
denom <-  vars
numer.J <- rep(J*final.n.stage, each=K)
information.final <- numer.J/denom
tau <- c(delta1[1], delta0[2])*sqrt(information.final)
ts.power.single.stage <- sweep(ts.global.null[, 3:4], 2, tau, "+")
reject.power <- ts.power.single.stage > r.k.single.stage
power.t1.single.stage <- sum(rowSums(reject.power)>0)/nsims
# Collate results for output:
typeIerr.k.c <- rbind(typeIerr.k, typeIerr.k.nodrop, t1.err.single.stage)
colnames(typeIerr.k.c) <- paste("typeIerr.k", 1:length(alpha.k), sep="")
typeIerr.total.c <- c(sum(typeIerr.k), sum(typeIerr.k.nodrop), t1.err.single.stage)
power.c <- c(final.pwr$pwr, pwr.nodrop.output$pwr, power.t1.single.stage)
final.bounds <- rbind(r.k, r.k.nodrop, r.k.single.stage)
#colnames(final.bounds) <- paste("r.k", 1:K, sep="") # Only needed when bounds differ
colnames(final.bounds) <- "r.k"
design.results <- cbind(final.bounds, typeIerr.k.c, typeIerr.total.c, power.c)
# Shared results:
final.nmax <- 2*final.n.stage
shared <- cbind(cp.l, t(delta0), t(delta1), final.nmax, t(alpha.k), sum(alpha.k), power)
colnames(shared) <- c("cp.l", paste("delta0.k", 1:K, sep=""), paste("delta1.k", 1:K, sep=""), "nMax",  paste("alpha.k", 1:length(alpha.k), sep=""), "alpha", "power")
output <- list(results=cbind(rbind(shared, shared, shared), design.results),
paths=rbind(final.pwr$paths, pwr.nodrop.output$paths)
#cp=pwr.output$cp
)
rownames(output$results) <- c("Drop", "No drop", "Single stage")
return(output)
}
always.drop <- findCPloserDes(nsims=10^5,
K=2,
seed=5,
alpha.k=c(0.05),
alpha.combine=TRUE,
power=0.9,
cp.l=0.1,
delta0 = c(0.1, -1000),
delta1 = c(0.4, 0.4),
always.drop=T,
rho.vec = 0.01)
always.drop[[1]]
always.drop[[2]]
drop.below.cpl <-  findCPloserDes(nsims=10^5,
K=2,
seed=5,
alpha.k=c(0.05),
alpha.combine=TRUE,
power=0.9,
cp.l=0.3,
delta0 = c(0.1, -1000),
delta1 = c(0.4, 0.4),
always.drop = F,
rho.vec = 0.01)
drop.below.cpl[[1]]
always.drop1 <- always.drop[[1]]
#write.csv(always.drop1, "always2.csv")
drop.below.cpl1 <- drop.below.cpl[[1]]
#write.csv(drop.below.cpl1, "below2.csv")
###### ADRIAN: "knowing that it is a lower  r_k than the  single stage design but you get the same power just canâ€™t be correct." He was right!
a1 <- findCPloserDes(nsims=10^4,
K=2,
vars=c(1,1),
delta0=c(0.2, 0.2),
delta1=c(0.4, 0.4),
alpha.k=c(0.04, 0.04),
alpha.combine=TRUE,
always.drop=FALSE,
seed=1,
cp.l=0.3,
cp.u=1,
n.init=20,
power=0.8,
n.max=100,
rho.vec=0.5)
a1 <- findCPloserDes(nsims=10^4,
K=2,
vars=c(1,1),
delta0=c(0.2, 0.2),
delta1=c(0.4, 0.4),
alpha.k=0.04,
alpha.combine=TRUE,
always.drop=FALSE,
seed=1,
cp.l=0.3,
cp.u=1,
n.init=20,
power=0.8,
n.max=100,
rho.vec=0.5)
a2 <- findCPloserDes(nsims=10^4,
K=2,
vars=c(1,1),
delta0=c(0.2, 0.2),
delta1=c(0.4, 0.4),
alpha.k=0.04,
alpha.combine=TRUE,
always.drop=FALSE,
seed=1,
cp.l=0.3,
cp.u=1,
n.init=60,
power=0.8,
n.max=100,
rho.vec=0.5)
a1
a2
a1 <- findCPloserDes(nsims=10^4,
K=2,
vars=c(1,1),
delta0=c(0.2, 0.2),
delta1=c(0.4, 0.4),
alpha.k=0.05,
alpha.combine=TRUE,
always.drop=FALSE,
seed=1,
cp.l=0.3,
cp.u=1,
n.init=20,
power=0.8,
n.max=100,
rho.vec=0.5)
a2 <- findCPloserDes(nsims=10^4,
K=2,
vars=c(1,1),
delta0=c(0.2, 0.2),
delta1=c(0.4, 0.4),
alpha.k=0.05,
alpha.combine=TRUE,
always.drop=FALSE,
seed=1,
cp.l=0.3,
cp.u=1,
n.init=60,
power=0.8,
n.max=100,
rho.vec=0.5)
a1
a2
a1 <- findCPloserDes(nsims=10^4,
K=2,
vars=c(1,1),
delta0=c(0.2, -1000),
delta1=c(0.4, 0.4),
alpha.k=0.05,
alpha.combine=TRUE,
always.drop=FALSE,
seed=7,
cp.l=0.3,
cp.u=1,
n.init=20,
power=0.8,
n.max=100,
rho.vec=0.1)
a1
a2 <- findCPloserDes(nsims=10^4,
K=2,
vars=c(1,1),
delta0=c(0.2, -1000),
delta1=c(0.4, 0.4),
alpha.k=0.05,
alpha.combine=TRUE,
always.drop=FALSE,
seed=7,
cp.l=0.3,
cp.u=1,
n.init=60,
power=0.8,
n.max=100,
rho.vec=0.1)
a1
a2
a2 <- findCPloserDes(nsims=10^4,
K=2,
vars=c(1,1),
delta0=c(0.1, -1000),
delta1=c(0.4, 0.4),
alpha.k=0.05,
alpha.combine=TRUE,
always.drop=FALSE,
seed=7,
cp.l=0.3,
cp.u=1,
n.init=60,
power=0.8,
n.max=100,
rho.vec=0.1)
install.packages("dplyr")
.libPaths()
new <- c("\\\\bliss-03-nfs/homes/martin/R_packages", .libPaths())
new
.libPaths(new)
.libPaths()
install.packages("dplyr")
new <- c("H:/martin/R_package_library", .libPaths())
.libPaths(new)
new
install.packages("dplyr")
.libPaths()
new
.libPaths(new)
.libPaths()
.libPaths(new)
.libPaths()
here::here()
new2 <- "H:/martin/R_package_library"
new2
.libPaths(new2)
.libPaths()
?.libPaths
.libPaths(new2)
.libPaths()
new
.libPaths(new)
.libPaths()
new <- c("H:/R_package_library", .libPaths())
.libPaths(new)
.libPaths()
.libPaths()
install.packages("dplyr")
devtools::install_github("martinlaw/curtailment")
library(curtailment)
new <- c("H:/R_package_library", .libPaths())
.libPaths(new)
#devtools::install_github("martinlaw/curtailment")
#library(curtailment)
install.packages("xfun")
new <- c("H:/R_package_library", .libPaths())
.libPaths(new)
#devtools::install_github("martinlaw/curtailment")
#library(curtailment)
install.packages("xfun")
library(xfun)
?xfun
?valid_syntax
install.packages("xfun")
new <- c("H:/R_package_library", .libPaths())
.libPaths(new)
#devtools::install_github("martinlaw/curtailment")
#library(curtailment)
install.packages("xfun")
new
.libPaths(new)
new <- c("../../../../H:/R_package_library")
.libPaths(new)
#devtools::install_github("martinlaw/curtailment")
#library(curtailment)
install.packages("xfun")
new <- c("H:/R_package_library", .libPaths())
.libPaths()
.libPaths(new)
.libPaths()
#devtools::install_github("martinlaw/curtailment")
#library(curtailment)
install.packages("xfun")
install.packages("rmarkdown")
install.packages("H:/rmarkdown_2.9.zip", repos = NULL, type = "win.binary")
new <- c("H:/R_package_library", .libPaths())
.libPaths(new)
.libPaths()
install.packages("//bliss-03-nfs/homes/martin/xfun_0.24.zip", repos = NULL, type = "win.binary")
remove.packages("xfun", lib="\\bliss-03-nfs/homes/martin/Documents/R/win-library/3.6")
library(xfun)
install.packages("//bliss-03-nfs/homes/martin/xfun_0.24.zip", repos = NULL, type = "win.binary")
library(xfun)
library(rmarkdown)
help("Startup")
R.home()
path.expand()
path.expand("~")
help("RProfile")
help("Rprofile")
help("Rprofile")
R.home(component="home")
.libPaths()
p <- 77/79
(p*(1-p)/79)
sqrt((p*(1-p)/79))
se <- sqrt((p*(1-p)/79))
p-1.96*se
p+1.96*se
p
p <- 74/76
p
se <- sqrt((p*(1-p)/79))
p-1.96*se
p+1.96*se
#   p <- r/n
#   q <- 1-p
#   A <- 2*r + z^2
#   B <- z*sqrt(z^2 + 4*r*q)
#   C <- 2*(n+z^2)
#   lower <- (A-B)/C
#   upper <- (A+B)/C
#   output <- round(c(lower, upper), 3)
#   output
# }
ci <- function(r, n=25, z=1.96){
p <- r/n
se <- sqrt(p*(1-p)/n)
lower <- (p-z*se)
upper <- (p+z*se)
output <- round(c(lower, upper), 2)
output
}
ci(74,76)
ci(6,6)
ci <- function(r, n=25, z=1.96){
p <- r/n
q <- 1-p
A <- 2*r + z^2
B <- z*sqrt(z^2 + 4*r*q)
C <- 2*(n+z^2)
lower <- (A-B)/C
upper <- (A+B)/C
output <- round(c(lower, upper), 3)
output
}
ci(6,6)
library(usethis)
use_git_config(user.name = "martinlaw", user.email = "martin.law@mrc-bsu.cam.ac.uk")
getwd()
setwd("//bliss-03-nfs/homes/martin")
setwd("//bliss-03-nfs/homes/martin")
getwd()
devtools::create("pwb")
getwd()
setwd("H:/martin")
setwd("H:/#")
setwd("H:/#")
setwd("H:/")
devtools::create("pwb")
library(usethis)
use_git_config(user.name = "martinlaw", user.email = "martin.law@mrc-bsu.cam.ac.uk")
getwd()
devtools::create("pwb")
0.3*365/12
0.37*365/12
187/27
269/35
185/35
5.3*0.15
5.3*0.15*27
35*7.7*0.224
5.3*0.113*35
0.3*35
52/27
116/35
1769*0.26
758*0.15
0.37*365
1769*0.22
2000/365
1800*0.26
900*0.15
1800*0.26 + 900*0.15
1700*0.15
600-250
2700*0.15
4900/350
devtools::install_github("martinlaw/pwb")
devtools::install_github("martinlaw/pwb", build_vignettes=TRUE)
browseVignettes(pwb)
browseVignettes("pwb")
devtools::install_github("martinlaw/pwb", build_vignettes=TRUE)
browseVignettes("pwb")
setwd("~/pwb")
load("~/pwb/data/RPWsim.rda")
library(pwb)
library(ggplot2)
cond_bias = data.frame(allocation = RPWsim$N1/N,
uncond = (RPWsim$theta_U - theta)/theta,
cond = (RPWsim$theta_C - theta)/theta)
# Setup
nsim = 10^6
N = 1000
p0 = 0.25
p1 = 0.5
theta = log(1-p1)-log(1-p0)
set.seed(7)
theta_U = theta_D = theta_C = ID = IU = N1 = rep(NA, nsim)
cond_bias = data.frame(allocation = RPWsim$N1/N,
uncond = (RPWsim$theta_U - theta)/theta,
cond = (RPWsim$theta_C - theta)/theta)
ggplot(cond_bias, aes(x=allocation, y=100*uncond)) +
stat_summary_bin(fun='mean', bins=100, col = 'blue',
size=2, geom='point') +
xlab('Allocation proportion') + ylab('Unconditional bias (%)')
ggplot(cond_bias, aes(x=allocation, y=100*cond)) +
stat_summary_bin(fun='mean', bins=100, col = 'red',
size=2, geom='point') + ylim(c(-40, 40)) +
xlab('Allocation proportion') + ylab('Conditional bias (%)')
rm(list=ls())
devtools::install_github("martinlaw/pwb", build_vignettes=TRUE)
devtools::build_vignettes("pwb")
devtools::build_vignettes(pwb)
library(pwb)
devtools::build_vignettes("pwb")
devtools::build_vignettes(pwb)
?devtools::build_vignettes
devtools::build_vignettes()
