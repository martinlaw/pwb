pwbias[i] <- weighted.mean(x=theta.hat-theta.vec[i], w=1/se^2)
}
dat <- data.frame(theta=rep(theta.vec, times=2),
bias=c(naive, pwbias),
type=rep(c("naive", "precision weighted"), each=length(theta.vec)))
ggplot(data=dat, mapping=aes(x=theta, y=bias, col=type))+
geom_line()+
labs(title="Bias for single-arm, single-stage trial with N=1000")+
scale_x_continuous(breaks=theta.vec)
# Relative bias:
relative <- data.frame(relative.bias=abs(pwbias)/abs(naive),
theta=theta.vec)
ggplot(data=relative, mapping=aes(x=theta, y=relative.bias))+
geom_line()+
labs(title="Relative bias (PWB/naive) for single-arm, single-stage trial with N=1000")+
scale_x_continuous(breaks=theta.vec)+
geom_hline(aes(yintercept=1), col="grey", linetype="dashed")
nsims <- 1e7
N <- 1000
theta.vec <- seq(0.1, 0.9, 0.1)
naive <- pwbias <- numeric(length(theta.vec))
for (i in 1:length(theta.vec)) {
responses <- rbinom(nsims, N, theta.vec[i])
theta.hat <- responses/N
naive[i] <- mean(theta.hat-theta.vec[i])
se <- sqrt(theta.hat*(1-theta.hat)/N)
pwbias[i] <- weighted.mean(x=theta.hat-theta.vec[i], w=1/se^2)
}
dat <- data.frame(theta=rep(theta.vec, times=2),
bias=c(naive, pwbias),
type=rep(c("naive", "precision weighted"), each=length(theta.vec)))
ggplot(data=dat, mapping=aes(x=theta, y=bias, col=type))+
geom_line()+
labs(title="Bias for single-arm, single-stage trial with N=1000")+
scale_x_continuous(breaks=theta.vec)
# Relative bias:
relative <- data.frame(relative.bias=abs(pwbias)/abs(naive),
theta=theta.vec)
ggplot(data=relative, mapping=aes(x=theta, y=relative.bias))+
geom_line()+
labs(title="Relative bias (PWB/naive) for single-arm, single-stage trial with N=1000")+
scale_x_continuous(breaks=theta.vec)+
geom_hline(aes(yintercept=1), col="grey", linetype="dashed")
nsims <- 1e6
N <- 1000
theta.vec <- seq(0.1, 0.9, 0.1)
naive <- pwbias <- numeric(length(theta.vec))
for (i in 1:length(theta.vec)) {
responses <- rbinom(nsims, N, theta.vec[i])
theta.hat <- responses/N
naive[i] <- mean(theta.hat-theta.vec[i])
se <- sqrt(theta.hat*(1-theta.hat)/N)
pwbias[i] <- weighted.mean(x=theta.hat-theta.vec[i], w=1/se^2)
}
dat <- data.frame(theta=rep(theta.vec, times=2),
bias=c(naive, pwbias),
type=rep(c("naive", "precision weighted"), each=length(theta.vec)))
ggplot(data=dat, mapping=aes(x=theta, y=bias, col=type))+
geom_line()+
labs(title="Bias for single-arm, single-stage trial with N=1000")+
scale_x_continuous(breaks=theta.vec)
# Relative bias:
relative <- data.frame(relative.bias=abs(pwbias)/abs(naive),
theta=theta.vec)
ggplot(data=relative, mapping=aes(x=theta, y=relative.bias))+
geom_line()+
labs(title="Relative bias (PWB/naive) for single-arm, single-stage trial with N=1000")+
scale_x_continuous(breaks=theta.vec)+
geom_hline(aes(yintercept=1), col="grey", linetype="dashed")
# Zoom in:
ggplot(data=relative, mapping=aes(x=theta, y=relative.bias))+
geom_line()+
labs(title="Relative bias (PWB/naive) for single-arm, single-stage trial with N=1000")+
scale_x_continuous(breaks=theta.vec)+
geom_hline(aes(yintercept=1), col="grey", linetype="dashed")+
coord_cartesian(ylim=c(-10, 10))
# Zoom in:
ggplot(data=relative, mapping=aes(x=theta, y=relative.bias))+
geom_line()+
labs(title="Relative bias (PWB/naive) for single-arm, single-stage trial with N=1000")+
scale_x_continuous(breaks=theta.vec)+
geom_hline(aes(yintercept=1), col="grey", linetype="dashed")+
coord_cartesian(ylim=c(-100, 100))
# Zoom in:
ggplot(data=relative, mapping=aes(x=theta, y=relative.bias))+
geom_line()+
labs(title="Relative bias (PWB/naive) for single-arm, single-stage trial with N=1000")+
scale_x_continuous(breaks=theta.vec)+
geom_hline(aes(yintercept=1), col="grey", linetype="dashed")+
coord_cartesian(ylim=c(-10, 10))
ggplot(data=relative, mapping=aes(x=theta, y=relative.bias))+
geom_line()+
labs(title="Relative bias (PWB/naive) for single-arm, single-stage trial with N=1000")+
scale_x_continuous(breaks=theta.vec)+
geom_hline(aes(yintercept=1), col="grey", linetype="dashed")
vignette("simon", pwb)
vignette("simon", "pwb")
nsims <- 1e6
N <- 100
theta.vec <- seq(0.1, 0.9, 0.1)
naive <- pwbias <- numeric(length(theta.vec))
for (i in 1:length(theta.vec)) {
responses <- rbinom(nsims, N, theta.vec[i])
theta.hat <- responses/N
naive[i] <- mean(theta.hat-theta.vec[i])
se <- sqrt(theta.hat*(1-theta.hat)/N)
pwbias[i] <- weighted.mean(x=theta.hat-theta.vec[i], w=1/se^2)
}
dat <- data.frame(theta=rep(theta.vec, times=2),
bias=c(naive, pwbias),
type=rep(c("naive", "precision weighted"), each=length(theta.vec)))
ggplot(data=dat, mapping=aes(x=theta, y=bias, col=type))+
geom_line()+
labs(title="Bias for single-arm, single-stage trial with N=1000")+
scale_x_continuous(breaks=theta.vec)
# Relative bias:
relative <- data.frame(relative.bias=abs(pwbias)/abs(naive),
theta=theta.vec)
ggplot(data=relative, mapping=aes(x=theta, y=relative.bias))+
geom_line()+
labs(title="Relative bias (PWB/naive) for single-arm, single-stage trial with N=1000")+
scale_x_continuous(breaks=theta.vec)+
geom_hline(aes(yintercept=1), col="grey", linetype="dashed")
# Zoom in:
ggplot(data=relative, mapping=aes(x=theta, y=relative.bias))+
geom_line()+
labs(title="Relative bias (PWB/naive) for single-arm, single-stage trial with N=1000")+
scale_x_continuous(breaks=theta.vec)+
geom_hline(aes(yintercept=1), col="grey", linetype="dashed")+
coord_cartesian(ylim=c(-10, 10))
ggplot(data=relative, mapping=aes(x=theta, y=relative.bias))+
geom_line()+
labs(title="Relative bias (PWB/naive) for single-arm, single-stage trial with N=1000")+
scale_x_continuous(breaks=theta.vec)+
geom_hline(aes(yintercept=1), col="grey", linetype="dashed")
ggplot(data=dat, mapping=aes(x=theta, y=bias, col=type))+
geom_line()+
labs(title="Bias for single-arm, single-stage trial with N=1000")+
scale_x_continuous(breaks=theta.vec)
vignette("simon", "pwb")
nsims <- 1e6
N <- 100
theta.vec <- seq(0.1, 0.9, 0.1)
naive <- pwbias <- numeric(length(theta.vec))
for (i in 1:length(theta.vec)) {
responses <- rbinom(nsims, N, theta.vec[i])
theta.hat <- responses/N
naive[i] <- mean(theta.hat-theta.vec[i])
se <- sqrt(theta.hat*(1-theta.hat)/N)
pwbias[i] <- weighted.mean(x=theta.hat-theta.vec[i], w=1/se^2)
}
dat <- data.frame(theta=rep(theta.vec, times=2),
bias=c(naive, pwbias),
type=rep(c("naive", "precision weighted"), each=length(theta.vec)))
ggplot(data=dat, mapping=aes(x=theta, y=bias, col=type))+
geom_line()+
labs(title="Bias for single-arm, single-stage trial with N=1000")+
scale_x_continuous(breaks=theta.vec)
# Relative bias:
relative <- data.frame(relative.bias=abs(pwbias)/abs(naive),
theta=theta.vec)
ggplot(data=relative, mapping=aes(x=theta, y=relative.bias))+
geom_line()+
labs(title="Relative bias (PWB/naive) for single-arm, single-stage trial with N=1000")+
scale_x_continuous(breaks=theta.vec)+
geom_hline(aes(yintercept=1), col="grey", linetype="dashed")
# Zoom in:
ggplot(data=relative, mapping=aes(x=theta, y=relative.bias))+
geom_line()+
labs(title="Relative bias (PWB/naive) for single-arm, single-stage trial with N=1000")+
scale_x_continuous(breaks=theta.vec)+
geom_hline(aes(yintercept=1), col="grey", linetype="dashed")+
coord_cartesian(ylim=c(-10, 10))
vignette("simon", "pwb")
sqrt(theta.hat*(1-theta.hat)/N)
nsims <- 1e6
N <- 100
theta.vec <- seq(0.1, 0.9, 0.1)
naive <- pwbias <- precision <- numeric(length(theta.vec))
se.list <- vector("list", length(theta.vec))
for (i in 1:length(theta.vec)) {
responses <- rbinom(nsims, N, theta.vec[i])
theta.hat <- responses/N
naive[i] <- mean(theta.hat-theta.vec[i])
se <- sqrt(theta.hat*(1-theta.hat)/N)
pwbias[i] <- weighted.mean(x=theta.hat-theta.vec[i], w=1/se^2)
se.list[[i]] <- se
}
se.list
hist(se.list[[1]])
se.vec <- c(se.list)
se.vec
rep(theta.vec, times=nsims)
rep(theta.vec, each=nsims)
se.df <- data.frame(se=c(se.list),
theta=rep(theta.vec, each=nsims))
ggplot(data=se.df, mapping=aes(x=theta, y=se))+
geom_boxplot()
se.df
ggplot(data=se.df, mapping=aes(x=theta, y=se))+
geom_boxplot()
length(se.list)
length(c(se.list))
se.list
c(se.list)
se.df <- data.frame(se=unlist(se.list),
theta=rep(theta.vec, each=nsims))
ggplot(data=se.df, mapping=aes(x=theta, y=se))+
geom_boxplot()
ggplot(data=se.df, mapping=aes(group=theta, y=se))+
geom_boxplot()
se.df <- data.frame(se=unlist(se.list),
theta=rep(as.character(theta.vec), each=nsims))
ggplot(data=se.df, mapping=aes(x=theta, y=se))+
geom_boxplot()
0.1*0.9/100
0.5*0.5/100
ggplot(data=dat, mapping=aes(x=theta, y=bias, col=type))+
geom_line()+
labs(title="Bias for single-arm, single-stage trial with N=1000")+
scale_x_continuous(breaks=theta.vec)
nsims <- 1e5
N <- 100
theta.vec <- seq(0.1, 0.9, 0.1)
naive <- pwbias <- precision <- numeric(length(theta.vec))
usethis::use_vignette("PWB and non-adaptive designs")
usethis::use_vignette("Non-adaptive_designs")
0.05*0.95/100
0.5*0.5/100
library(pwb)
library(ggplot2)
# Simulate single-stage design:
nsims <- 1e5
N <- 100
theta.vec <- seq(0.1, 0.9, 0.1)
naive <- pwbias <- precision <- numeric(length(theta.vec))
se.list <- vector("list", length(theta.vec))
for (i in 1:length(theta.vec)) {
responses <- rbinom(nsims, N, theta.vec[i])
theta.hat <- responses/N
naive[i] <- mean(theta.hat-theta.vec[i])
se <- sqrt(theta.hat*(1-theta.hat)/N)
pwbias[i] <- weighted.mean(x=theta.hat-theta.vec[i], w=1/se^2)
se.list[[i]] <- se
}
dat <- data.frame(theta=rep(theta.vec, times=2),
bias=c(naive, pwbias),
type=rep(c("naive", "precision weighted"), each=length(theta.vec)))
se.df <- data.frame(se=unlist(se.list),
theta=rep(as.character(theta.vec), each=nsims))
se
test <- data.frame(pwbias, se)
test <- data.frame(theta.hat, se)
head(test)
plot(theta.hat, se)
hat <- seq(0, 1, 0.01)
seee <- sqrt(hat*(1-hat)/100)
plot(hat, seee)
test
cbind(hat, seee)
# When you add documentation in the function file, run devtools::document() and roxygen will convert it into "real" documentation:
devtools::document()
rm(list = c("dat", "hat", "i", "N", "naive", "nsim", "nsims", "precision", "pwbias", "relative", "responses", "se", "se.df", "se.list", "seee", "theta.hat", "theta.vec"))
# When you add documentation in the function file, run devtools::document() and roxygen will convert it into "real" documentation:
devtools::document()
# When you add documentation in the function file, run devtools::document() and roxygen will convert it into "real" documentation:
devtools::document()
# check package can be installed etc.
x <- devtools::check()
# Add a licence:
usethis::use_gpl_license(version=3,include_future=TRUE)
?rbinom
usethis::use_package("stats")
# When you add documentation in the function file, run devtools::document() and roxygen will convert it into "real" documentation:
devtools::document()
usethis::use_readme_rmd()
?browseVignettes
browseVignettes("pwb")
vignette(package="pwb")
# When you add documentation in the function file, run devtools::document() and roxygen will convert it into "real" documentation:
devtools::document()
vignette("RPW")
vignette("simon")
library(pwb)
library(ggplot2)
all.designs2 <- clinfun::ph2simon(pu=0.8,
pa=0.9,
ep1=0.05,
ep2=0.1,
nmax=500)
# Choose optimal Simon design:
opt.index <- which.min(all.designs$out[, "EN(p0)"])
all.designs2
all.designs2 <- clinfun::ph2simon(pu=0.8,
pa=0.9,
ep1=0.05,
ep2=0.1,
nmax=150)
# Choose optimal Simon design:
opt.index <- which.min(all.designs2$out[, "EN(p0)"])
simon.des2 <- all.designs$out[opt.index, ]
all.designs2 <- clinfun::ph2simon(pu=0.8,
pa=0.9,
ep1=0.05,
ep2=0.1,
nmax=150)
# Choose optimal Simon design:
opt.index <- which.min(all.designs2$out[, "EN(p0)"])
simon.des2 <- all.designs2$out[opt.index, ]
simon.des2
all.designs2 <- clinfun::ph2simon(pu=0.8,
pa=0.9,
ep1=0.05,
ep2=0.1,
nmax=150)
# Choose optimal Simon design:
opt.index <- which.min(all.designs2$out[, "EN(p0)"])
simon.des2 <- all.designs2$out[opt.index, ]
##### Obtain bias for range of true response probabilities ####
theta.vec2 <- seq(0.1, 0.9, 0.1) # Vector of true response probabilities
summary.data2 <- raw.data2 <- vector("list", length(theta.vec2))
stop.early.count2 <- rep(NA, length(theta.vec2))
for(i in 1:length(theta.vec2)){
one.run <- pwbSimon(theta=theta.vec2[i],
des=simon.des2,
nsims=nsims)
raw.data2[[i]] <- one.run$results
summary.data2[[i]] <- one.run$ests
stop.early.count2[i] <- one.run$ests["Stopped early", "nsims"]/nsims
}
##### Obtain bias for range of true response probabilities ####
theta.vec2 <- seq(0.5, 0.9, 0.05) # Vector of true response probabilities
summary.data2 <- raw.data2 <- vector("list", length(theta.vec2))
stop.early.count2 <- rep(NA, length(theta.vec2))
for(i in 1:length(theta.vec2)){
one.run <- pwbSimon(theta=theta.vec2[i],
des=simon.des2,
nsims=nsims)
raw.data2[[i]] <- one.run$results
summary.data2[[i]] <- one.run$ests
stop.early.count2[i] <- one.run$ests["Stopped early", "nsims"]/nsims
}
all.simon2 <- do.call(rbind, summary.data2)
#### Plot bias -- no subsetting of "stopped early" or "stopped at N" ####
simon.plot.sub2 <- ggplot(data=all.simon2[all.simon2$type %in% c("All (naive)", "All (precision-weghted)"), ], mapping=aes(x=theta, y=bias, col=type))+
geom_line(alpha=0.4, size=1)+
geom_point()+
labs(x="True response probability theta",
y="Bias (estimate - theta)",
title="Bias in Simon design (p0=0.8, p1=0.9)",
subtitle="Includes proportion of trials stopped early")+
annotate("text", x=theta.vec2, y=-0.015, label=round(stop.early.count2,2))+
geom_vline(aes(xintercept=0.8), col="grey", linetype="dashed")+
geom_vline(aes(xintercept=0.9), col="grey", linetype="dashed")+
geom_hline(aes(yintercept=0), col="grey", linetype="dashed")+
scale_x_continuous(breaks=theta.vec2)+
scale_color_manual(values=simon.colours)
simon.colours <- setNames(c("#F8766D", "#A3A500", "#00BF7D", "#00B0F6", "#E76BF3"),
c("All (naive)", "All (precision-weghted)", "Complete (naive)", "Stopped early (naive)", "UMVUE"))
#### Plot bias -- no subsetting of "stopped early" or "stopped at N" ####
simon.plot.sub2 <- ggplot(data=all.simon2[all.simon2$type %in% c("All (naive)", "All (precision-weghted)"), ], mapping=aes(x=theta, y=bias, col=type))+
geom_line(alpha=0.4, size=1)+
geom_point()+
labs(x="True response probability theta",
y="Bias (estimate - theta)",
title="Bias in Simon design (p0=0.8, p1=0.9)",
subtitle="Includes proportion of trials stopped early")+
annotate("text", x=theta.vec2, y=-0.015, label=round(stop.early.count2,2))+
geom_vline(aes(xintercept=0.8), col="grey", linetype="dashed")+
geom_vline(aes(xintercept=0.9), col="grey", linetype="dashed")+
geom_hline(aes(yintercept=0), col="grey", linetype="dashed")+
scale_x_continuous(breaks=theta.vec2)+
scale_color_manual(values=simon.colours)
simon.plot.sub2
#### Plot bias -- no subsetting of "stopped early" or "stopped at N" ####
simon.plot.sub2 <- ggplot(data=all.simon2[all.simon2$type %in% c("All (naive)", "All (precision-weghted)"), ], mapping=aes(x=theta, y=bias, col=type))+
geom_line(alpha=0.4, size=1)+
geom_point()+
labs(x="True response probability theta",
y="Bias (estimate - theta)",
title="Bias in Simon design (p0=0.8, p1=0.9)",
subtitle="Includes proportion of trials stopped early")+
annotate("text", x=theta.vec2, y=-0.015, label=round(stop.early.count2,2))+
geom_vline(aes(xintercept=0.8), col="grey", linetype="dashed")+
geom_vline(aes(xintercept=0.9), col="grey", linetype="dashed")+
geom_hline(aes(yintercept=0), col="grey", linetype="dashed")+
ylim(0-max(abs(bias)), 0+max(abs(bias)))
scale_x_continuous(breaks=theta.vec2)+
scale_color_manual(values=simon.colours)
#### Plot bias -- no subsetting of "stopped early" or "stopped at N" ####
simon.plot.sub2 <- ggplot(data=all.simon2[all.simon2$type %in% c("All (naive)", "All (precision-weghted)"), ], mapping=aes(x=theta, y=bias, col=type))+
geom_line(alpha=0.4, size=1)+
geom_point()+
labs(x="True response probability theta",
y="Bias (estimate - theta)",
title="Bias in Simon design (p0=0.8, p1=0.9)",
subtitle="Includes proportion of trials stopped early")+
annotate("text", x=theta.vec2, y=-0.015, label=round(stop.early.count2,2))+
geom_vline(aes(xintercept=0.8), col="grey", linetype="dashed")+
geom_vline(aes(xintercept=0.9), col="grey", linetype="dashed")+
geom_hline(aes(yintercept=0), col="grey", linetype="dashed")+
ylim(0-max(abs(bias)), 0+max(abs(bias)))+
scale_x_continuous(breaks=theta.vec2)+
scale_color_manual(values=simon.colours)
simon.plot.sub2
#### Plot bias -- no subsetting of "stopped early" or "stopped at N" ####
simon.plot.sub2 <- ggplot(data=all.simon2[all.simon2$type %in% c("All (naive)", "All (precision-weghted)"), ], mapping=aes(x=theta, y=bias, col=type))+
geom_line(alpha=0.4, size=1)+
geom_point()+
labs(x="True response probability theta",
y="Bias (estimate - theta)",
title="Bias in Simon design (p0=0.8, p1=0.9)",
subtitle="Includes proportion of trials stopped early")+
annotate("text", x=theta.vec2, y=-0.015, label=round(stop.early.count2,2))+
geom_vline(aes(xintercept=0.8), col="grey", linetype="dashed")+
geom_vline(aes(xintercept=0.9), col="grey", linetype="dashed")+
geom_hline(aes(yintercept=0), col="grey", linetype="dashed")+
ylim(0-max(abs(bias)), 0+max(abs(bias)))+
scale_x_continuous(breaks=theta.vec2)+
scale_color_manual(values=simon.colours)
simon.plot.sub2
#### Plot bias -- no subsetting of "stopped early" or "stopped at N" ####
simon.plot.sub2 <- ggplot(data=all.simon2[all.simon2$type %in% c("All (naive)", "All (precision-weghted)"), ], mapping=aes(x=theta, y=bias, col=type))+
geom_line(alpha=0.4, size=1)+
geom_point()+
labs(x="True response probability theta",
y="Bias (estimate - theta)",
title="Bias in Simon design (p0=0.8, p1=0.9)",
subtitle="Includes proportion of trials stopped early")+
annotate("text", x=theta.vec2, y=-0.015, label=round(stop.early.count2,2))+
geom_vline(aes(xintercept=0.8), col="grey", linetype="dashed")+
geom_vline(aes(xintercept=0.9), col="grey", linetype="dashed")+
geom_hline(aes(yintercept=0), col="grey", linetype="dashed")+
# ylim(0-max(abs(bias)), 0+max(abs(bias)))+
scale_x_continuous(breaks=theta.vec2)+
scale_color_manual(values=simon.colours)
simon.plot.sub2
#### Plot bias -- no subsetting of "stopped early" or "stopped at N" ####
simon.plot.sub2 <- ggplot(data=all.simon2[all.simon2$type %in% c("All (naive)", "All (precision-weghted)"), ], mapping=aes(x=theta, y=bias, col=type))+
geom_line(alpha=0.4, size=1)+
geom_point()+
labs(x="True response probability theta",
y="Bias (estimate - theta)",
title="Bias in Simon design (p0=0.8, p1=0.9)",
subtitle="Includes proportion of trials stopped early")+
annotate("text", x=theta.vec2, y=-0.015, label=round(stop.early.count2,2))+
geom_vline(aes(xintercept=0.8), col="grey", linetype="dashed")+
geom_vline(aes(xintercept=0.9), col="grey", linetype="dashed")+
geom_hline(aes(yintercept=0), col="grey", linetype="dashed")+
# ylim(0-max(abs(bias)), 0+max(abs(bias)))+
ylim(-0.2, 0.2)+
scale_x_continuous(breaks=theta.vec2)+
scale_color_manual(values=simon.colours)
simon.plot.sub2
#### Plot bias -- no subsetting of "stopped early" or "stopped at N" ####
simon.sub.df2 <- all.simon2[all.simon2$type %in% c("All (naive)", "All (precision-weghted)"), ]
simon.plot.sub2 <- ggplot(data=simon.sub.df2, mapping=aes(x=theta, y=bias, col=type))+
geom_line(alpha=0.4, size=1)+
geom_point()+
labs(x="True response probability theta",
y="Bias (estimate - theta)",
title="Bias in Simon design (p0=0.8, p1=0.9)",
subtitle="Includes proportion of trials stopped early")+
annotate("text", x=theta.vec2, y=-0.015, label=round(stop.early.count2,2))+
geom_vline(aes(xintercept=0.8), col="grey", linetype="dashed")+
geom_vline(aes(xintercept=0.9), col="grey", linetype="dashed")+
geom_hline(aes(yintercept=0), col="grey", linetype="dashed")+
ylim(0-max(abs(simon.sub.df2$bias)), 0+max(abs(simon.sub.df2$bias)))+
# ylim(-0.2, 0.2)+
scale_x_continuous(breaks=theta.vec2)+
scale_color_manual(values=simon.colours)
simon.plot.sub2
#### Plot bias -- no subsetting of "stopped early" or "stopped at N" ####
simon.sub.df2 <- all.simon2[all.simon2$type %in% c("All (naive)", "All (precision-weghted)"), ]
simon.plot.sub2 <- ggplot(data=simon.sub.df2, mapping=aes(x=theta, y=bias, col=type))+
geom_line(alpha=0.4, size=1)+
geom_point()+
labs(x="True response probability theta",
y="Bias (estimate - theta)",
title="Bias in Simon design (p0=0.8, p1=0.9)",
subtitle="Includes proportion of trials stopped early")+
annotate("text", x=theta.vec2, y=-0.015, label=round(stop.early.count2,2))+
geom_vline(aes(xintercept=0.8), col="grey", linetype="dashed")+
geom_vline(aes(xintercept=0.9), col="grey", linetype="dashed")+
geom_hline(aes(yintercept=0), col="grey", linetype="dashed")+
#ylim(0-max(abs(simon.sub.df2$bias)), 0+max(abs(simon.sub.df2$bias)))+
ylim(max(abs(simon.sub.df2$bias)) * c(-1,1) )+
scale_x_continuous(breaks=theta.vec2)+
scale_color_manual(values=simon.colours)
simon.plot.sub2
#### Plot bias -- no subsetting of "stopped early" or "stopped at N" ####
simon.sub.df2 <- all.simon2[all.simon2$type %in% c("All (naive)", "All (precision-weghted)"), ]
simon.plot.sub2 <- ggplot(data=simon.sub.df2, mapping=aes(x=theta, y=bias, col=type))+
geom_line(alpha=0.4, size=1)+
geom_point()+
labs(x="True response probability theta",
y="Bias (estimate - theta)",
title="Bias in Simon design (p0=0.8, p1=0.9)",
subtitle="Includes proportion of trials stopped early")+
annotate("text", x=theta.vec2, y=-0.015, label=round(stop.early.count2,2))+
geom_vline(aes(xintercept=0.8), col="grey", linetype="dashed")+
geom_vline(aes(xintercept=0.9), col="grey", linetype="dashed")+
geom_hline(aes(yintercept=0), col="grey", linetype="dashed")+
ylim(max(abs(simon.sub.df2$bias)) * c(-1.1, 1.1) )+
scale_x_continuous(breaks=theta.vec2)+
scale_color_manual(values=simon.colours)
simon.plot.sub2
#### Plot bias -- no subsetting of "stopped early" or "stopped at N" ####
simon.sub.df <- all.simon[all.simon$type %in% c("All (naive)", "All (precision-weghted)"), ]
devtools::document()
rm(i)
devtools::document()
